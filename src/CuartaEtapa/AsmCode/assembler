.386                  ; Enable 32-bit instructions
.MODEL FLAT           ; Use FLAT memory model for 32-bit systems
.STACK 100h           ; Define stack size;

.data

.code
FUN1@MAIN PROC
XOR EAX, EAX
MOV EAX, [ESP+4]
MOV U1@MAIN@FUN1,1
MOV U2@MAIN@FUN1,2
MOV auxt_3,U1@MAIN@FUN1
ADD auxt_3,U2@MAIN@FUN1
INVOKE printf, addr __new_line__
invoke printf, cfm$("%u\n"), auxt_3
MOV auxt_5,U1@MAIN@FUN1
ADD auxt_5,U2@MAIN@FUN1
MOV P@MAIN@FUN1,auxt_5
MOV varfloat,varfloat
.386                  ; Enable 32-bit instructions
.MODEL FLAT           ; Use FLAT memory model for 32-bit systems
.STACK 100h           ; Define stack size;

.data

.code
MOV Y@MAIN,3
MOV auxt_1,1
ADD auxt_1,2
MOV auxt_2,auxt_1
SUB auxt_2,Y@MAIN
MOV X@MAIN,auxt_2
INVOKE printf, addr __new_line__
invoke printf, cfm$("%u\n"), X@MAIN
.386                  ; Enable 32-bit instructions
.MODEL FLAT           ; Use FLAT memory model for 32-bit systems
.STACK 100h           ; Define stack size;

.data

.code
MOV Y@MAIN,3
MOV auxt_1,1
ADD auxt_1,2
MOV auxt_2,auxt_1
SUB auxt_2,Y@MAIN
MOV X@MAIN,auxt_2
INVOKE printf, addr __new_line__
invoke printf, cfm$("%u\n"), X@MAIN
.386                  ; Enable 32-bit instructions
.MODEL FLAT           ; Use FLAT memory model for 32-bit systems
.STACK 100h           ; Define stack size;

.data

.code
MOV Y@MAIN,3
MOV auxt_1,1
ADD auxt_1,2
MOV auxt_2,auxt_1
SUB auxt_2,Y@MAIN
MOV X@MAIN,auxt_2
INVOKE printf, addr __new_line__
invoke printf, cfm$("%u\n"), X@MAIN
.386                  ; Enable 32-bit instructions
.MODEL FLAT           ; Use FLAT memory model for 32-bit systems
.STACK 100h           ; Define stack size;

.data

.code
MOV Y@MAIN,3
MOV auxt_1,1
ADD auxt_1,2
MOV auxt_2,auxt_1
SUB auxt_2,Y@MAIN
MOV X@MAIN,auxt_2
INVOKE printf, addr __new_line__
invoke printf, cfm$("%u\n"), X@MAIN
